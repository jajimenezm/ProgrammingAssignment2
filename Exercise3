makeCacheMatrix <- function(x = matrix()) {
  y <- det(x)   ## Calculating the determinant of x
  if ( y!= 0 ){  
    inv <- NULL
    set <- function(z) {
      x <<- z
      inv <<- NULL
    }
    get <- function() x
    setinverse <- function(inverse) inv <<- inverse
    getinverse <- function() inv
    list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
  }  
  else (y == 0 ) 
    print("x not is invertible")
}


cacheSolve <- function(x, ...) {  
  inv <- x$getinverse()
  if(!is.null(inv)) {
    message("getting cached data.")
    return(inv)
  }
  data <- x$get()
  inv <- solve(data)
  x$setinverse(inv)
  inv  
}
